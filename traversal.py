# -*- coding: utf-8 -*-
"""traversal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJNJrQRIKylwwsG9sLZHN92Sf5pFvqfE
"""

import struct

# Read memory from the dump file given the address and size
def read_memory(address, size, memory_dump_path):
    """Reads 'size' bytes from the given 'address' in the memory dump file."""
    with open(memory_dump_path, 'rb') as f:
        f.seek(address)  # Seek to the specified address
        return f.read(size)

def traverse_gc(memory_dump, pyruntime_offset, vma_start):
    """
    Traverse the GC linked lists in the memory dump.

    Parameters:
    - memory_dump: str - Path to the memory dump file
    - pyruntime_offset: int - Offset to the _PyRuntimeState structure
    - vma_start: int - Starting address of the VMA
    """
    # Calculate the address of _PyRuntimeState
    pyruntime_state_addr = vma_start + pyruntime_offset
    print(f"Address of _PyRuntimeState: 0x{pyruntime_state_addr:x}")

    # Read _PyRuntimeState structure
    pyruntime_state = read_memory(pyruntime_state_addr, 64, memory_dump)  # Reading at expected size
    gc_runtime_state_addr = struct.unpack_from("Q", pyruntime_state, 320)[0]  # Offset to GC runtime state
    print(f"GC Runtime State Address: 0x{gc_runtime_state_addr:x}")

    # Read GC Runtime State
    gc_runtime_state = read_memory(gc_runtime_state_addr, 24, memory_dump)  # Read enough bytes to unpack
    generation_addresses = struct.unpack_from("3Q", gc_runtime_state)

    print("Generation Addresses:")
    for i, addr in enumerate(generation_addresses):
        print(f"Generation {i} head at: 0x{addr:x}")

        if addr != 0:  # Check if the address is not null
            traverse_generation(memory_dump, addr)

def traverse_generation(memory_dump, head_addr):
    """
    Traverse through a generation linked list of GC objects.

    Parameters:
    - memory_dump: str - Path to the memory dump file
    - head_addr: int - Address of the head of the generation linked list
    """
    while head_addr != 0:
        gc_head = read_memory(head_addr, 16, memory_dump)
        size, type_id = struct.unpack_from("QI", gc_head, 0)
        obj_addr = struct.unpack_from("Q", gc_head, 8)[0]
        print(f"GC Object: Address=0x{obj_addr:x}, Size={size}, Type ID={type_id}")

        head_addr = struct.unpack_from("Q", gc_head, 8)[0]  # Move to next PyGC_Head in the list

def main():
    # Specify the memory dump file and the VMA start address and pyruntime_offset
    memory_dump = "/home/vboxuser/volatility3/pid.2586.vma.0x8f3000-0x93a000.dmp"
    pyruntime_offset = 0x5e58  # Offset to _PyRuntimeState
    vma_start = 0x8f3000  # VMA start address

    # Start the GC traversal process
    traverse_gc(memory_dump, pyruntime_offset, vma_start)

if __name__ == "__main__":
    main()